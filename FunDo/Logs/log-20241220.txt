2024-12-20 11:34:17.941 +05:30 [INF] User profile is available. Using 'C:\Users\Shreesha_MS\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2024-12-20 11:34:18.224 +05:30 [INF] Now listening on: https://localhost:5000
2024-12-20 11:34:18.225 +05:30 [INF] Now listening on: http://localhost:5001
2024-12-20 11:34:18.263 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2024-12-20 11:34:18.264 +05:30 [INF] Hosting environment: Development
2024-12-20 11:34:18.264 +05:30 [INF] Content root path: D:\FunDo\FunDo
2024-12-20 11:34:19.825 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/swagger/index.html - null null
2024-12-20 11:34:19.990 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/swagger/index.html - 200 null text/html;charset=utf-8 174.1713ms
2024-12-20 11:34:19.995 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/_framework/aspnetcore-browser-refresh.js - null null
2024-12-20 11:34:19.995 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/_vs/browserLink - null null
2024-12-20 11:34:20.006 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/_framework/aspnetcore-browser-refresh.js - 200 13758 application/javascript; charset=utf-8 11.0485ms
2024-12-20 11:34:20.051 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/_vs/browserLink - 200 null text/javascript; charset=UTF-8 56.918ms
2024-12-20 11:34:20.211 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/swagger/v1/swagger.json - null null
2024-12-20 11:34:20.287 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 76.6649ms
2024-12-20 11:35:35.707 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/user/login - null null
2024-12-20 11:35:35.714 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:35.716 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/user/login - 204 null null 9.0984ms
2024-12-20 11:35:35.723 +05:30 [INF] Request starting HTTP/2 POST https://localhost:5000/api/user/login - application/json 62
2024-12-20 11:35:35.726 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:36.745 +05:30 [INF] Executing endpoint 'FunDo.Controllers.UserController.LoginUser (FunDooNotes)'
2024-12-20 11:35:36.770 +05:30 [INF] Route matched with {action = "LoginUser", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoginUser(Models.DTOs.LoginUserDto) on controller FunDo.Controllers.UserController (FunDooNotes).
2024-12-20 11:35:37.217 +05:30 [INF] Logging user shreesha2002ms@gmail.com
2024-12-20 11:35:37.218 +05:30 [INF] Checking if the user present
2024-12-20 11:35:37.220 +05:30 [INF] Attempting to retrieve user with Email: shreesha2002ms@gmail.com
2024-12-20 11:35:38.721 +05:30 [INF] Executed DbCommand (99ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[Id], [u].[Email], [u].[Name], [u].[Password], [u].[Phone]
FROM [Users] AS [u]
WHERE [u].[Email] = @__email_0
2024-12-20 11:35:38.775 +05:30 [INF] User with Email: shreesha2002ms@gmail.com retrieved successfully.
2024-12-20 11:35:38.777 +05:30 [INF] Verifying the password
2024-12-20 11:35:39.123 +05:30 [INF] Password is valid and token is generated
2024-12-20 11:35:39.124 +05:30 [INF] Login successful
2024-12-20 11:35:39.131 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.LoginResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 11:35:39.137 +05:30 [INF] Executed action FunDo.Controllers.UserController.LoginUser (FunDooNotes) in 2363.0153ms
2024-12-20 11:35:39.138 +05:30 [INF] Executed endpoint 'FunDo.Controllers.UserController.LoginUser (FunDooNotes)'
2024-12-20 11:35:39.143 +05:30 [INF] Request finished HTTP/2 POST https://localhost:5000/api/user/login - 200 null application/json; charset=utf-8 3420.6698ms
2024-12-20 11:35:39.159 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 11:35:39.161 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:39.162 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 2.5092ms
2024-12-20 11:35:39.164 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 11:35:39.165 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:39.210 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:39.214 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:35:39.218 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 11:35:39.251 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 11:35:39.252 +05:30 [WRN] Failed to fetch notes from cache
2024-12-20 11:35:39.253 +05:30 [INF] Fetching all notes for user with ID: 1
2024-12-20 11:35:39.256 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 11:35:39.282 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 11:35:39.285 +05:30 [INF] Fetching notes for user with ID: 1
2024-12-20 11:35:39.333 +05:30 [INF] Executed DbCommand (13ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [n].[Id], [n].[Title], [n].[Description], [n].[Color], [n].[IsArchive], [n].[IsTrash], CASE
    WHEN [n].[UserId] = @__userId_0 THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END AS [IsCreated]
FROM [Notes] AS [n]
WHERE [n].[UserId] = @__userId_0 OR EXISTS (
    SELECT 1
    FROM [Collaborators] AS [c]
    WHERE [c].[UserId] = @__userId_0 AND [c].[NoteId] = [n].[Id])
2024-12-20 11:35:39.338 +05:30 [INF] 23 notes retrieved for user with ID: 1
2024-12-20 11:35:39.339 +05:30 [INF] Serializing notes to store it in cache
2024-12-20 11:35:39.347 +05:30 [INF] Notes retrieved successfully
2024-12-20 11:35:39.349 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 11:35:39.352 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 136.9478ms
2024-12-20 11:35:39.352 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:39.353 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 189.716ms
2024-12-20 11:35:44.642 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 11:35:44.646 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:44.647 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 4.8938ms
2024-12-20 11:35:44.650 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 11:35:44.653 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:44.658 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:44.659 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:35:44.661 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 11:35:44.664 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 11:35:44.665 +05:30 [INF] Fetched notes from cache successfully
2024-12-20 11:35:44.665 +05:30 [INF] Deserializing the notes
2024-12-20 11:35:44.667 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 11:35:44.669 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 8.2256ms
2024-12-20 11:35:44.669 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:44.670 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 20.6541ms
2024-12-20 11:35:45.955 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 11:35:45.957 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:45.960 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:45.963 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:35:45.967 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 11:35:45.968 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 11:35:45.970 +05:30 [INF] Fetched notes from cache successfully
2024-12-20 11:35:45.970 +05:30 [INF] Deserializing the notes
2024-12-20 11:35:45.971 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 11:35:45.971 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 7.0272ms
2024-12-20 11:35:45.972 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:45.973 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 18.5052ms
2024-12-20 11:35:47.404 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 11:35:47.406 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:35:47.407 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:47.408 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:35:47.410 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 11:35:47.412 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 11:35:47.413 +05:30 [INF] Fetched notes from cache successfully
2024-12-20 11:35:47.413 +05:30 [INF] Deserializing the notes
2024-12-20 11:35:47.414 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 11:35:47.414 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 5.1891ms
2024-12-20 11:35:47.415 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:35:47.416 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 12.0986ms
2024-12-20 11:36:36.474 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1080 - null null
2024-12-20 11:36:36.476 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:36:36.477 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1080 - 204 null null 2.8459ms
2024-12-20 11:36:36.479 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1080 - application/json 101
2024-12-20 11:36:36.481 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:36:36.482 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 11:36:36.487 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:36:36.758 +05:30 [INF] Received note update: {"Title":"new4","Description":"vdhfuv","Color":"#ffffff","IsArchive":false,"IsTrash":false}
2024-12-20 11:36:36.759 +05:30 [INF] Updating note with ID: 1080
2024-12-20 11:36:36.760 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1080
2024-12-20 11:36:36.762 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 11:36:36.808 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 11:36:36.809 +05:30 [INF] Retrieving note with ID: 1080
2024-12-20 11:36:36.830 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 11:36:36.842 +05:30 [INF] User with ID: 1 has permission to update note ID: 1080
2024-12-20 11:36:36.863 +05:30 [INF] Successfully updated note with ID: 1080
2024-12-20 11:36:36.866 +05:30 [INF] Retrieved notes successfully
2024-12-20 11:36:36.867 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 11:36:36.869 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 380.4343ms
2024-12-20 11:36:36.870 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 11:36:36.871 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1080 - 200 null application/json; charset=utf-8 391.7819ms
2024-12-20 11:37:06.276 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 11:37:06.283 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:37:06.285 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 8.9103ms
2024-12-20 11:37:06.287 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 11:37:06.289 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:37:06.290 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:37:06.291 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:37:06.293 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 11:37:06.294 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 11:37:06.295 +05:30 [WRN] Failed to fetch notes from cache
2024-12-20 11:37:06.296 +05:30 [INF] Fetching all notes for user with ID: 1
2024-12-20 11:37:06.297 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 11:37:06.303 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 11:37:06.305 +05:30 [INF] Fetching notes for user with ID: 1
2024-12-20 11:37:06.312 +05:30 [INF] Executed DbCommand (5ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [n].[Id], [n].[Title], [n].[Description], [n].[Color], [n].[IsArchive], [n].[IsTrash], CASE
    WHEN [n].[UserId] = @__userId_0 THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END AS [IsCreated]
FROM [Notes] AS [n]
WHERE [n].[UserId] = @__userId_0 OR EXISTS (
    SELECT 1
    FROM [Collaborators] AS [c]
    WHERE [c].[UserId] = @__userId_0 AND [c].[NoteId] = [n].[Id])
2024-12-20 11:37:06.314 +05:30 [INF] 23 notes retrieved for user with ID: 1
2024-12-20 11:37:06.315 +05:30 [INF] Serializing notes to store it in cache
2024-12-20 11:37:06.316 +05:30 [INF] Notes retrieved successfully
2024-12-20 11:37:06.317 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 11:37:06.317 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 25.1086ms
2024-12-20 11:37:06.318 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:37:06.319 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 32.1479ms
2024-12-20 11:37:07.785 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 11:37:07.788 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:37:07.789 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:37:07.791 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:37:07.792 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 11:37:07.794 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 11:37:07.795 +05:30 [INF] Fetched notes from cache successfully
2024-12-20 11:37:07.795 +05:30 [INF] Deserializing the notes
2024-12-20 11:37:07.797 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 11:37:07.798 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 5.9886ms
2024-12-20 11:37:07.799 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:37:07.800 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 14.743ms
2024-12-20 11:37:09.044 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 11:37:09.047 +05:30 [INF] CORS policy execution successful.
2024-12-20 11:37:09.048 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:37:09.049 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 11:37:09.051 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 11:37:09.053 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 11:37:09.054 +05:30 [INF] Fetched notes from cache successfully
2024-12-20 11:37:09.054 +05:30 [INF] Deserializing the notes
2024-12-20 11:37:09.055 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 11:37:09.057 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 6.4344ms
2024-12-20 11:37:09.057 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 11:37:09.058 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 14.2976ms
2024-12-20 14:35:19.875 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 14:35:19.878 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:19.878 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 4.1797ms
2024-12-20 14:35:19.880 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 14:35:19.882 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:19.887 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '20-12-2024 07:05:39', Current time (UTC): '20-12-2024 09:05:19'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2024-12-20 14:35:19.900 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2024-12-20 14:35:19.943 +05:30 [ERR] An unhandled exception has occurred.
System.InvalidOperationException: StatusCode cannot be set because the response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ThrowResponseAlreadyStartedException(String value)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.set_StatusCode(Int32 value)
   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler.HandleChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationService.ChallengeAsync(HttpContext context, String scheme, AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.<>c__DisplayClass0_0.<<HandleAsync>g__Handle|0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 25
2024-12-20 14:35:19.983 +05:30 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-12-20 14:35:19.986 +05:30 [WRN] The response has already started, the error page middleware will not be executed.
2024-12-20 14:35:19.988 +05:30 [ERR] Connection id "0HN90NGHUM77E", Request id "0HN90NGHUM77E:00000003": An unhandled exception was thrown by the application.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-12-20 14:35:20.003 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 401 null application/json 123.0195ms
2024-12-20 14:35:21.096 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 14:35:21.098 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:21.100 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '20-12-2024 07:05:39', Current time (UTC): '20-12-2024 09:05:21'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2024-12-20 14:35:21.102 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2024-12-20 14:35:21.114 +05:30 [ERR] An unhandled exception has occurred.
System.InvalidOperationException: StatusCode cannot be set because the response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ThrowResponseAlreadyStartedException(String value)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.set_StatusCode(Int32 value)
   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler.HandleChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationService.ChallengeAsync(HttpContext context, String scheme, AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.<>c__DisplayClass0_0.<<HandleAsync>g__Handle|0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 25
2024-12-20 14:35:21.136 +05:30 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-12-20 14:35:21.138 +05:30 [WRN] The response has already started, the error page middleware will not be executed.
2024-12-20 14:35:21.139 +05:30 [ERR] Connection id "0HN90NGHUM77E", Request id "0HN90NGHUM77E:00000005": An unhandled exception was thrown by the application.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-12-20 14:35:21.141 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 401 null application/json 45.534ms
2024-12-20 14:35:22.483 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 14:35:22.486 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:22.487 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '20-12-2024 07:05:39', Current time (UTC): '20-12-2024 09:05:22'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2024-12-20 14:35:22.489 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2024-12-20 14:35:22.502 +05:30 [ERR] An unhandled exception has occurred.
System.InvalidOperationException: StatusCode cannot be set because the response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ThrowResponseAlreadyStartedException(String value)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.set_StatusCode(Int32 value)
   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler.HandleChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationService.ChallengeAsync(HttpContext context, String scheme, AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.<>c__DisplayClass0_0.<<HandleAsync>g__Handle|0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 25
2024-12-20 14:35:22.523 +05:30 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-12-20 14:35:22.524 +05:30 [WRN] The response has already started, the error page middleware will not be executed.
2024-12-20 14:35:22.525 +05:30 [ERR] Connection id "0HN90NGHUM77E", Request id "0HN90NGHUM77E:00000007": An unhandled exception was thrown by the application.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-12-20 14:35:22.527 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 401 null application/json 44.7781ms
2024-12-20 14:35:45.064 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/user/login - null null
2024-12-20 14:35:45.068 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:45.068 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/user/login - 204 null null 4.9961ms
2024-12-20 14:35:45.070 +05:30 [INF] Request starting HTTP/2 POST https://localhost:5000/api/user/login - application/json 62
2024-12-20 14:35:45.071 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:45.072 +05:30 [INF] Executing endpoint 'FunDo.Controllers.UserController.LoginUser (FunDooNotes)'
2024-12-20 14:35:45.072 +05:30 [INF] Route matched with {action = "LoginUser", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoginUser(Models.DTOs.LoginUserDto) on controller FunDo.Controllers.UserController (FunDooNotes).
2024-12-20 14:35:45.089 +05:30 [INF] Logging user shreesha2002ms@gmail.com
2024-12-20 14:35:45.089 +05:30 [INF] Checking if the user present
2024-12-20 14:35:45.089 +05:30 [INF] Attempting to retrieve user with Email: shreesha2002ms@gmail.com
2024-12-20 14:35:45.111 +05:30 [INF] Executed DbCommand (11ms) [Parameters=[@__email_0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[Id], [u].[Email], [u].[Name], [u].[Password], [u].[Phone]
FROM [Users] AS [u]
WHERE [u].[Email] = @__email_0
2024-12-20 14:35:45.113 +05:30 [INF] User with Email: shreesha2002ms@gmail.com retrieved successfully.
2024-12-20 14:35:45.113 +05:30 [INF] Verifying the password
2024-12-20 14:35:45.283 +05:30 [INF] Password is valid and token is generated
2024-12-20 14:35:45.285 +05:30 [INF] Login successful
2024-12-20 14:35:45.286 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.LoginResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 14:35:45.286 +05:30 [INF] Executed action FunDo.Controllers.UserController.LoginUser (FunDooNotes) in 213.5241ms
2024-12-20 14:35:45.287 +05:30 [INF] Executed endpoint 'FunDo.Controllers.UserController.LoginUser (FunDooNotes)'
2024-12-20 14:35:45.288 +05:30 [INF] Request finished HTTP/2 POST https://localhost:5000/api/user/login - 200 null application/json; charset=utf-8 218.3711ms
2024-12-20 14:35:45.304 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 14:35:45.306 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:45.306 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 2.0773ms
2024-12-20 14:35:45.309 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 14:35:45.310 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:35:45.311 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 14:35:45.311 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 14:35:45.312 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 14:35:45.313 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 14:35:45.314 +05:30 [WRN] Failed to fetch notes from cache
2024-12-20 14:35:45.314 +05:30 [INF] Fetching all notes for user with ID: 1
2024-12-20 14:35:45.315 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 14:35:45.319 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 14:35:45.322 +05:30 [INF] Fetching notes for user with ID: 1
2024-12-20 14:35:45.329 +05:30 [INF] Executed DbCommand (6ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [n].[Id], [n].[Title], [n].[Description], [n].[Color], [n].[IsArchive], [n].[IsTrash], CASE
    WHEN [n].[UserId] = @__userId_0 THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END AS [IsCreated]
FROM [Notes] AS [n]
WHERE [n].[UserId] = @__userId_0 OR EXISTS (
    SELECT 1
    FROM [Collaborators] AS [c]
    WHERE [c].[UserId] = @__userId_0 AND [c].[NoteId] = [n].[Id])
2024-12-20 14:35:45.330 +05:30 [INF] 23 notes retrieved for user with ID: 1
2024-12-20 14:35:45.331 +05:30 [INF] Serializing notes to store it in cache
2024-12-20 14:35:45.332 +05:30 [INF] Notes retrieved successfully
2024-12-20 14:35:45.332 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 14:35:45.333 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 20.4859ms
2024-12-20 14:35:45.333 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 14:35:45.334 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 25.1061ms
2024-12-20 14:36:37.141 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 14:36:37.142 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:36:37.143 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 2.4023ms
2024-12-20 14:36:37.145 +05:30 [INF] Request starting HTTP/2 POST https://localhost:5000/api/notes - application/json 89
2024-12-20 14:36:37.147 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:36:37.147 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.CreateNote (FunDooNotes)'
2024-12-20 14:36:37.151 +05:30 [INF] Route matched with {action = "CreateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] CreateNote(Models.DTOs.NoteDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 14:36:37.161 +05:30 [INF] Attempt to create a note
2024-12-20 14:36:37.173 +05:30 [INF] Executed DbCommand (8ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 14:36:37.245 +05:30 [INF] Executed DbCommand (9ms) [Parameters=[@p0='?' (Size = 4000), @p1='?' (Size = 4000), @p2='?' (DbType = Boolean), @p3='?' (DbType = Boolean), @p4='?' (Size = 4000), @p5='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Notes] ([Color], [Description], [IsArchive], [IsTrash], [Title], [UserId])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5);
2024-12-20 14:36:37.262 +05:30 [INF] Created notes successfully
2024-12-20 14:36:37.262 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 14:36:37.263 +05:30 [INF] Executed action FunDo.Controllers.NoteController.CreateNote (FunDooNotes) in 111.1078ms
2024-12-20 14:36:37.264 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.CreateNote (FunDooNotes)'
2024-12-20 14:36:37.264 +05:30 [INF] Request finished HTTP/2 POST https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 119.2693ms
2024-12-20 14:36:40.019 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 14:36:40.023 +05:30 [INF] CORS policy execution successful.
2024-12-20 14:36:40.025 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 14:36:40.026 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 14:36:40.028 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 14:36:40.028 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 14:36:40.030 +05:30 [WRN] Failed to fetch notes from cache
2024-12-20 14:36:40.030 +05:30 [INF] Fetching all notes for user with ID: 1
2024-12-20 14:36:40.031 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 14:36:40.033 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 14:36:40.035 +05:30 [INF] Fetching notes for user with ID: 1
2024-12-20 14:36:40.043 +05:30 [INF] Executed DbCommand (7ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [n].[Id], [n].[Title], [n].[Description], [n].[Color], [n].[IsArchive], [n].[IsTrash], CASE
    WHEN [n].[UserId] = @__userId_0 THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END AS [IsCreated]
FROM [Notes] AS [n]
WHERE [n].[UserId] = @__userId_0 OR EXISTS (
    SELECT 1
    FROM [Collaborators] AS [c]
    WHERE [c].[UserId] = @__userId_0 AND [c].[NoteId] = [n].[Id])
2024-12-20 14:36:40.046 +05:30 [INF] 24 notes retrieved for user with ID: 1
2024-12-20 14:36:40.047 +05:30 [INF] Serializing notes to store it in cache
2024-12-20 14:36:40.047 +05:30 [INF] Notes retrieved successfully
2024-12-20 14:36:40.048 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 14:36:40.048 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 21.1953ms
2024-12-20 14:36:40.049 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 14:36:40.050 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 30.511ms
2024-12-20 15:09:14.237 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - null null
2024-12-20 15:09:14.249 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:09:14.250 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - 204 null null 13.646ms
2024-12-20 15:09:14.254 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1049 - application/json 101
2024-12-20 15:09:14.266 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:09:14.268 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:09:14.273 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:09:14.280 +05:30 [INF] Received note update: {"Title":"sxhdg","Description":"bsvxy","Color":"#ffffff","IsArchive":false,"IsTrash":false}
2024-12-20 15:09:14.282 +05:30 [INF] Updating note with ID: 1049
2024-12-20 15:09:14.283 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1049
2024-12-20 15:09:14.285 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:09:14.321 +05:30 [INF] Executed DbCommand (10ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:09:14.326 +05:30 [INF] Retrieving note with ID: 1049
2024-12-20 15:09:14.333 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:09:14.343 +05:30 [INF] User with ID: 1 has permission to update note ID: 1049
2024-12-20 15:09:14.347 +05:30 [INF] Successfully updated note with ID: 1049
2024-12-20 15:09:14.348 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:09:14.350 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:09:14.355 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 78.732ms
2024-12-20 15:09:14.357 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:09:14.358 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1049 - 200 null application/json; charset=utf-8 104.9798ms
2024-12-20 15:11:14.455 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - null null
2024-12-20 15:11:14.461 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:11:14.462 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - 204 null null 7.0064ms
2024-12-20 15:11:14.465 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1049 - application/json 101
2024-12-20 15:11:14.468 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:11:14.469 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:11:14.470 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:11:14.472 +05:30 [INF] Received note update: {"Title":"sxhdg","Description":"bsvxy","Color":"#ffffff","IsArchive":false,"IsTrash":false}
2024-12-20 15:11:14.473 +05:30 [INF] Updating note with ID: 1049
2024-12-20 15:11:14.473 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1049
2024-12-20 15:11:14.474 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:11:14.488 +05:30 [INF] Executed DbCommand (11ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:11:14.494 +05:30 [INF] Retrieving note with ID: 1049
2024-12-20 15:11:14.501 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:11:14.507 +05:30 [INF] User with ID: 1 has permission to update note ID: 1049
2024-12-20 15:11:14.507 +05:30 [INF] Successfully updated note with ID: 1049
2024-12-20 15:11:14.509 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:11:14.511 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:11:14.512 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 40.3066ms
2024-12-20 15:11:14.513 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:11:14.514 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1049 - 200 null application/json; charset=utf-8 49.4039ms
2024-12-20 15:14:22.492 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - null null
2024-12-20 15:14:22.503 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:14:22.505 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - 204 null null 14.2963ms
2024-12-20 15:14:22.508 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1049 - application/json 99
2024-12-20 15:14:22.513 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:14:22.518 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:14:22.521 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:14:22.525 +05:30 [INF] Received note update: {"Title":"sxh","Description":"bsvxy","Color":"#ffffff","IsArchive":false,"IsTrash":false}
2024-12-20 15:14:22.525 +05:30 [INF] Updating note with ID: 1049
2024-12-20 15:14:22.526 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1049
2024-12-20 15:14:22.527 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:14:22.536 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:14:22.537 +05:30 [INF] Retrieving note with ID: 1049
2024-12-20 15:14:22.542 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:14:22.543 +05:30 [INF] User with ID: 1 has permission to update note ID: 1049
2024-12-20 15:14:22.556 +05:30 [INF] Executed DbCommand (7ms) [Parameters=[@p1='?' (DbType = Int32), @p0='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
UPDATE [Notes] SET [Title] = @p0
OUTPUT 1
WHERE [Id] = @p1;
2024-12-20 15:14:22.560 +05:30 [INF] Successfully updated note with ID: 1049
2024-12-20 15:14:22.561 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:14:22.562 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:14:22.563 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 39.1385ms
2024-12-20 15:14:22.564 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:14:22.565 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1049 - 200 null application/json; charset=utf-8 56.7979ms
2024-12-20 15:23:20.245 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - null null
2024-12-20 15:23:20.257 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:23:20.259 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - 204 null null 14.8924ms
2024-12-20 15:23:20.261 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1049 - application/json 99
2024-12-20 15:23:20.269 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:23:20.271 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:23:20.273 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:23:20.276 +05:30 [INF] Received note update: {"Title":"sxh","Description":"bsvxy","Color":"#ffffff","IsArchive":false,"IsTrash":false}
2024-12-20 15:23:20.277 +05:30 [INF] Updating note with ID: 1049
2024-12-20 15:23:20.277 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1049
2024-12-20 15:23:20.278 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:23:20.315 +05:30 [INF] Executed DbCommand (18ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:23:20.324 +05:30 [INF] Retrieving note with ID: 1049
2024-12-20 15:23:20.329 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:23:20.331 +05:30 [INF] User with ID: 1 has permission to update note ID: 1049
2024-12-20 15:23:20.332 +05:30 [INF] Successfully updated note with ID: 1049
2024-12-20 15:23:20.332 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:23:20.333 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:23:20.335 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 60.2672ms
2024-12-20 15:23:20.336 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:23:20.337 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1049 - 200 null application/json; charset=utf-8 75.704ms
2024-12-20 15:23:44.620 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - null null
2024-12-20 15:23:44.629 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:23:44.630 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - 204 null null 10.9129ms
2024-12-20 15:23:44.632 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1049 - application/json 99
2024-12-20 15:23:44.638 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:23:44.640 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:23:44.642 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:23:44.643 +05:30 [INF] Received note update: {"Title":"sxh","Description":"bsvxy","Color":"#ffffff","IsArchive":false,"IsTrash":false}
2024-12-20 15:23:44.644 +05:30 [INF] Updating note with ID: 1049
2024-12-20 15:23:44.645 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1049
2024-12-20 15:23:44.645 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:23:44.660 +05:30 [INF] Executed DbCommand (13ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:23:44.663 +05:30 [INF] Retrieving note with ID: 1049
2024-12-20 15:23:44.667 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:23:44.670 +05:30 [INF] User with ID: 1 has permission to update note ID: 1049
2024-12-20 15:23:44.671 +05:30 [INF] Successfully updated note with ID: 1049
2024-12-20 15:23:44.672 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:23:44.673 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:23:44.674 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 31.3281ms
2024-12-20 15:23:44.675 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:23:44.677 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1049 - 200 null application/json; charset=utf-8 44.7316ms
2024-12-20 15:39:23.107 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1078 - null null
2024-12-20 15:39:23.109 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:39:23.110 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1078 - 204 null null 3.2524ms
2024-12-20 15:39:23.111 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1078 - application/json 98
2024-12-20 15:39:23.112 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:39:23.113 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:39:23.114 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:39:23.116 +05:30 [INF] Received note update: {"Title":"ne","Description":"jdfvc","Color":"#F6E2DD","IsArchive":false,"IsTrash":false}
2024-12-20 15:39:23.116 +05:30 [INF] Updating note with ID: 1078
2024-12-20 15:39:23.117 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1078
2024-12-20 15:39:23.117 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:39:23.137 +05:30 [INF] Executed DbCommand (12ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:39:23.138 +05:30 [INF] Retrieving note with ID: 1078
2024-12-20 15:39:23.141 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:39:23.142 +05:30 [INF] User with ID: 1 has permission to update note ID: 1078
2024-12-20 15:39:23.143 +05:30 [INF] Successfully updated note with ID: 1078
2024-12-20 15:39:23.143 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:39:23.144 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:39:23.144 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 29.615ms
2024-12-20 15:39:23.145 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:39:23.146 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1078 - 200 null application/json; charset=utf-8 34.2961ms
2024-12-20 15:40:12.160 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 15:40:12.165 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:12.166 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 5.7835ms
2024-12-20 15:40:12.169 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 15:40:12.171 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:12.172 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 15:40:12.173 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:40:12.175 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 15:40:12.176 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 15:40:12.177 +05:30 [WRN] Failed to fetch notes from cache
2024-12-20 15:40:12.178 +05:30 [INF] Fetching all notes for user with ID: 1
2024-12-20 15:40:12.178 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:40:12.184 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:40:12.185 +05:30 [INF] Fetching notes for user with ID: 1
2024-12-20 15:40:12.192 +05:30 [INF] Executed DbCommand (6ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [n].[Id], [n].[Title], [n].[Description], [n].[Color], [n].[IsArchive], [n].[IsTrash], CASE
    WHEN [n].[UserId] = @__userId_0 THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END AS [IsCreated]
FROM [Notes] AS [n]
WHERE [n].[UserId] = @__userId_0 OR EXISTS (
    SELECT 1
    FROM [Collaborators] AS [c]
    WHERE [c].[UserId] = @__userId_0 AND [c].[NoteId] = [n].[Id])
2024-12-20 15:40:12.194 +05:30 [INF] 24 notes retrieved for user with ID: 1
2024-12-20 15:40:12.194 +05:30 [INF] Serializing notes to store it in cache
2024-12-20 15:40:12.195 +05:30 [INF] Notes retrieved successfully
2024-12-20 15:40:12.195 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 15:40:12.196 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 21.1057ms
2024-12-20 15:40:12.196 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 15:40:12.197 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 28.3472ms
2024-12-20 15:40:16.682 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - null null
2024-12-20 15:40:16.685 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:16.686 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1049 - 204 null null 4.1954ms
2024-12-20 15:40:16.687 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1049 - application/json 99
2024-12-20 15:40:16.689 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:16.689 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:40:16.690 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:40:16.691 +05:30 [INF] Received note update: {"Title":"sxh","Description":"bsvxy","Color":"#ffffff","IsArchive":false,"IsTrash":false}
2024-12-20 15:40:16.692 +05:30 [INF] Updating note with ID: 1049
2024-12-20 15:40:16.692 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1049
2024-12-20 15:40:16.693 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:40:16.695 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:40:16.697 +05:30 [INF] Retrieving note with ID: 1049
2024-12-20 15:40:16.700 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:40:16.701 +05:30 [INF] User with ID: 1 has permission to update note ID: 1049
2024-12-20 15:40:16.702 +05:30 [INF] Successfully updated note with ID: 1049
2024-12-20 15:40:16.703 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:40:16.703 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:40:16.704 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 12.7073ms
2024-12-20 15:40:16.704 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:40:16.705 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1049 - 200 null application/json; charset=utf-8 17.5189ms
2024-12-20 15:40:18.837 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes/1078 - null null
2024-12-20 15:40:18.840 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:18.840 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes/1078 - 204 null null 3.6426ms
2024-12-20 15:40:18.842 +05:30 [INF] Request starting HTTP/2 PATCH https://localhost:5000/api/notes/1078 - application/json 98
2024-12-20 15:40:18.843 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:18.843 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:40:18.844 +05:30 [INF] Route matched with {action = "UpdateNote", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] UpdateNote(Int32, Models.DTOs.NoteUpdateDto) on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:40:18.846 +05:30 [INF] Received note update: {"Title":"ne","Description":"jdfvc","Color":"#F6E2DD","IsArchive":false,"IsTrash":false}
2024-12-20 15:40:18.846 +05:30 [INF] Updating note with ID: 1078
2024-12-20 15:40:18.847 +05:30 [INF] User with ID: 1 is attempting to update note with ID: 1078
2024-12-20 15:40:18.847 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:40:18.850 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:40:18.851 +05:30 [INF] Retrieving note with ID: 1078
2024-12-20 15:40:18.853 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [n].[Id], [n].[Color], [n].[Description], [n].[IsArchive], [n].[IsTrash], [n].[Title], [n].[UserId]
FROM [Notes] AS [n]
WHERE [n].[Id] = @__p_0
2024-12-20 15:40:18.854 +05:30 [INF] User with ID: 1 has permission to update note ID: 1078
2024-12-20 15:40:18.854 +05:30 [INF] Successfully updated note with ID: 1078
2024-12-20 15:40:18.855 +05:30 [INF] Retrieved notes successfully
2024-12-20 15:40:18.855 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2024-12-20 15:40:18.856 +05:30 [INF] Executed action FunDo.Controllers.NoteController.UpdateNote (FunDooNotes) in 10.5129ms
2024-12-20 15:40:18.856 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.UpdateNote (FunDooNotes)'
2024-12-20 15:40:18.857 +05:30 [INF] Request finished HTTP/2 PATCH https://localhost:5000/api/notes/1078 - 200 null application/json; charset=utf-8 15.0652ms
2024-12-20 15:40:25.932 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 15:40:25.933 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:25.933 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 1.7914ms
2024-12-20 15:40:25.935 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 15:40:25.936 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:25.937 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 15:40:25.938 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:40:25.939 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 15:40:25.940 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 15:40:25.941 +05:30 [WRN] Failed to fetch notes from cache
2024-12-20 15:40:25.941 +05:30 [INF] Fetching all notes for user with ID: 1
2024-12-20 15:40:25.941 +05:30 [INF] Checking if user with ID: 1 exists
2024-12-20 15:40:25.944 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM [Users] AS [u]
        WHERE [u].[Id] = @__userId_0) THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END
2024-12-20 15:40:25.945 +05:30 [INF] Fetching notes for user with ID: 1
2024-12-20 15:40:25.947 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__userId_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [n].[Id], [n].[Title], [n].[Description], [n].[Color], [n].[IsArchive], [n].[IsTrash], CASE
    WHEN [n].[UserId] = @__userId_0 THEN CAST(1 AS bit)
    ELSE CAST(0 AS bit)
END AS [IsCreated]
FROM [Notes] AS [n]
WHERE [n].[UserId] = @__userId_0 OR EXISTS (
    SELECT 1
    FROM [Collaborators] AS [c]
    WHERE [c].[UserId] = @__userId_0 AND [c].[NoteId] = [n].[Id])
2024-12-20 15:40:25.950 +05:30 [INF] 24 notes retrieved for user with ID: 1
2024-12-20 15:40:25.951 +05:30 [INF] Serializing notes to store it in cache
2024-12-20 15:40:25.951 +05:30 [INF] Notes retrieved successfully
2024-12-20 15:40:25.952 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 15:40:25.953 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 14.0415ms
2024-12-20 15:40:25.954 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 15:40:25.954 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 19.7773ms
2024-12-20 15:40:27.199 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 15:40:27.201 +05:30 [INF] CORS policy execution successful.
2024-12-20 15:40:27.201 +05:30 [INF] Executing endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 15:40:27.202 +05:30 [INF] Route matched with {action = "GetAllNotes", controller = "Note"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] GetAllNotes() on controller FunDo.Controllers.NoteController (FunDooNotes).
2024-12-20 15:40:27.203 +05:30 [INF] Attempt to get all notes from Database
2024-12-20 15:40:27.204 +05:30 [INF] Attempt to fetch notes from cache for user 1
2024-12-20 15:40:27.205 +05:30 [INF] Fetched notes from cache successfully
2024-12-20 15:40:27.205 +05:30 [INF] Deserializing the notes
2024-12-20 15:40:27.206 +05:30 [INF] Executing OkObjectResult, writing value of type 'Models.ApiResponse`1[[System.Collections.Generic.IEnumerable`1[[Models.DTOs.NoteResponseDto, Models, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]'.
2024-12-20 15:40:27.207 +05:30 [INF] Executed action FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes) in 4.581ms
2024-12-20 15:40:27.208 +05:30 [INF] Executed endpoint 'FunDo.Controllers.NoteController.GetAllNotes (FunDooNotes)'
2024-12-20 15:40:27.208 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 200 null application/json; charset=utf-8 9.3348ms
2024-12-20 17:31:00.632 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:5000/api/notes - null null
2024-12-20 17:31:00.675 +05:30 [INF] CORS policy execution successful.
2024-12-20 17:31:00.676 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:5000/api/notes - 204 null null 59.3389ms
2024-12-20 17:31:00.681 +05:30 [INF] Request starting HTTP/2 GET https://localhost:5000/api/notes - null null
2024-12-20 17:31:00.688 +05:30 [INF] CORS policy execution successful.
2024-12-20 17:31:00.696 +05:30 [INF] Failed to validate the token.
Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException: IDX10223: Lifetime validation failed. The token is expired. ValidTo (UTC): '20-12-2024 10:05:45', Current time (UTC): '20-12-2024 12:01:00'.
   at Microsoft.IdentityModel.Tokens.ValidatorUtilities.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(Nullable`1 notBefore, Nullable`1 expires, SecurityToken securityToken, TokenValidationParameters validationParameters)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
   at Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration)
2024-12-20 17:31:00.711 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2024-12-20 17:31:00.818 +05:30 [ERR] An unhandled exception has occurred.
System.InvalidOperationException: StatusCode cannot be set because the response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ThrowResponseAlreadyStartedException(String value)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.Microsoft.AspNetCore.Http.Features.IHttpResponseFeature.set_StatusCode(Int32 value)
   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler.HandleChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.ChallengeAsync(AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authentication.AuthenticationService.ChallengeAsync(HttpContext context, String scheme, AuthenticationProperties properties)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.<>c__DisplayClass0_0.<<HandleAsync>g__Handle|0>d.MoveNext()
--- End of stack trace from previous location ---
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 25
2024-12-20 17:31:00.895 +05:30 [ERR] An unhandled exception has occurred while executing the request.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
2024-12-20 17:31:00.898 +05:30 [WRN] The response has already started, the error page middleware will not be executed.
2024-12-20 17:31:00.899 +05:30 [ERR] Connection id "0HN90NGHUM77G", Request id "0HN90NGHUM77G:00000003": An unhandled exception was thrown by the application.
System.InvalidOperationException: Headers are read-only, response has already started.
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpHeaders.ThrowHeadersReadOnlyException()
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpResponseHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_ContentType(StringValues value)
   at Microsoft.AspNetCore.Http.DefaultHttpResponse.set_ContentType(String value)
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(HttpContext context, Exception exception) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 36
   at DataLayer.Exceptions.GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext context) in D:\FunDo\DataLayer\Exceptions\GlobalExceptionHandlingMiddleware.cs:line 29
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddlewareImpl.Invoke(HttpContext context)
   at Microsoft.WebTools.BrowserLink.Net.BrowserLinkMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Watch.BrowserRefresh.BrowserRefreshMiddleware.InvokeAsync(HttpContext context)
   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)
2024-12-20 17:31:00.904 +05:30 [INF] Request finished HTTP/2 GET https://localhost:5000/api/notes - 401 null application/json 224.039ms
